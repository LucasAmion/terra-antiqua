# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DEMBuilderDialog
                                 A QGIS plugin
 The plugin creates a paleoDEM by combyning present day topography and paleobathimetry, and modiying the final topography by introducing masks.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jovid Aminov
        email                : jovid.aminov@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog
from qgis.core import QgsMapLayerProxyModel, QgsProject, QgsVectorLayer, QgsRasterLayer

from qgis.core import QgsMapLayerProxyModel

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dem_builder_dialog_base.ui'))



class DEMBuilderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DEMBuilderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # #Specify the types for compilation
        # #list of options
        # options=['Baatsen-2016', 'Poblette']
        # self.reconstructionTypeBox.addItems(options)
        # #Elements of dialog are changed appropriately, when a reconstruction type is selected
        # self.reconstructionTypeBox.currentIndexChanged.connect(self.typeOfReconstruction)



        # clear the values in the dialog elements
        self.ageBox.setClearValue(0)
        self.ageBox.clear()  # clear the spinbox for the age of reconstructiton
        self.shelfDepthBox.setClearValue(0)
        self.shelfDepthBox.clear()  # clear the spinbox for the shelf detph
        # Setting the file widget in the storage mode
        self.outputPath.setStorageMode(self.outputPath.SaveFile)
        self.outputPath.setFilter('*.tif;;*.tiff')
        # defining types of the layers to be shown for each combobox
        # raster layers comboboxes

        #Ocean age
        self.selectOceanAge.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.selectOceanAge.setLayer(None)


        #Paleobathymetry
        self.selectPaleoBathy.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.selectPaleoBathy.setLayer(None)


        #Shallow sea
        self.selectSbathy.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.selectSbathy.setLayer(None)


        #Bedrock topography
        self.selectBrTopo.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.selectBrTopo.setLayer(None)





        # vector layers comboboxes
        self.selectMasks.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.selectMasks.setLayer(None)




        self.selectBathyButton.clicked.connect(self.addLayerToOceanAge)
        self.selectPBathyButton.clicked.connect(self.addLayerToPaleoBathy)
        self.selectSBathyButton.clicked.connect(self.addLayerToSBathy)
        self.selectTopoBrButton.clicked.connect(self.addLayerToTopoBr)

        self.selectMasksButton.clicked.connect(self.addLayerToMasks)





    # #Change the elements of the dialog based on the type of reconstruction
    # def typeOfReconstruction(self):
    #     current_index=self.reconstructionTypeBox.currentIndex()
    #     if current_index==1:
    #         self.selectOceanAge.setEnabled(False)
    #         self.selectOceanAge.hide()
    #         self.oceanAgeLabel.hide()
    #         self.selectBathyButton.hide()
    #
    #         self.selectSbathy.setEnabled(False)
    #         self.selectSbathy.hide()
    #         self.shallowSeaLabel.hide()
    #         self.selectSBathyButton.hide()
    #
    #         self.ageBox.setEnabled(False)
    #         self.ageBox.hide()
    #         self.ageBoxLabel.hide()
    #
    #         self.shelfDepthBox.setEnabled(False)
    #         self.shelfDepthBox.hide()
    #         self.shelfDepthBoxLabel.hide()
    #
    #     elif current_index==0:
    #         self.selectOceanAge.setEnabled(True)
    #         self.selectOceanAge.show()
    #         self.oceanAgeLabel.show()
    #         self.selectBathyButton.show()
    #
    #         self.selectSbathy.setEnabled(True)
    #         self.selectSbathy.show()
    #         self.shallowSeaLabel.show()
    #         self.selectSBathyButton.show()
    #
    #         self.ageBox.setEnabled(True)
    #         self.ageBox.show()
    #         self.ageBoxLabel.show()
    #
    #         self.shelfDepthBox.setEnabled(True)
    #         self.shelfDepthBox.show()
    #         self.shelfDepthBoxLabel.show()



    #Functions for adding layers from disk to comboboxes
    def addLayerToOceanAge(self):
        self.openRasterFromDisk(self.selectOceanAge)

    def addLayerToPaleoBathy(self):
        self.openRasterFromDisk(self.selectPaleoBathy)

    def addLayerToSBathy(self):
        self.openRasterFromDisk(self.selectSbathy)

    def addLayerToTopoBr(self):
        self.openRasterFromDisk(self.selectBrTopo)



    def addLayerToMasks(self):
        self.openVectorFromDisk(self.selectMasks)


    def openVectorFromDisk(self, box):
        fd = QFileDialog()
        filter = "Vector files (*.shp)"
        fname,_ = fd.getOpenFileName(caption='Select a vector layer', directory=None, filter=filter)

        if fname:
            name,_ = os.path.splitext(os.path.basename(fname))
            vlayer = QgsVectorLayer(fname, name, 'ogr')
            QgsProject.instance().addMapLayer(vlayer)
            box.setLayer(vlayer)

    def openRasterFromDisk(self, box):
        fd = QFileDialog()
        filter = "Raster files (*.jpg *.tif *.grd *.nc *.png *.tiff)"
        fname,_ = fd.getOpenFileName(caption='Select a vector layer', directory=None, filter=filter)

        if fname:
            name,_ = os.path.splitext(os.path.basename(fname))
            rlayer = QgsRasterLayer(fname, name, 'gdal')
            QgsProject.instance().addMapLayer(rlayer)
            box.setLayer(rlayer)


